package amazon.mobile.android.engine;

import java.io.File;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Random;
import java.util.TimeZone;

import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.StaleElementReferenceException;
import org.openqa.selenium.TimeoutException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedCondition;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import a2b.core.logs.LogManager;
import amazon.config.gblConstants;
import amazon.core.accelerators.WebActionEngine;

public class A2BWebActionEngine extends WebActionEngine {

	/**
	 * @Purpose To wait while spinner loads
	 * @Constraints
	 * @Output boolean : Returns True if element not present
	 */
	public boolean waitWhileLoading() {
		boolean blnRes = false;
		try {
			final String imgSpinner_css = "css=div#sfOverlayMgr";
			blnRes = waitForElementNotPresent(imgSpinner_css, gblConstants.wdWaitTimeout / 4);
		} catch (StaleElementReferenceException se) {
			blnRes = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return blnRes;

	}

	/**
	 * @Purpose To get required date of current month
	 * @Constraints
	 * @Input integer : required day ex: 1 gives start date of month
	 * @Output boolean : Returns date in user required format
	 */
	public String getDayofCurrentMonth(int num, String dateFormate) throws Exception {
		Calendar c = Calendar.getInstance();
		c.set(Calendar.DAY_OF_MONTH, num);
		DateFormat dateFormat = new SimpleDateFormat(dateFormate);
		String reqdate = dateFormat.format(c.getTime());
		return reqdate;
	}

	/**
	 * @Purpose To get current date in required format and time zone
	 * @Constraints
	 * @Input String : required format
	 * @Output boolean : Returns date in user required format
	 *//*
		 * public String getCurrentDate(String dateFormate) throws Exception {
		 * DateFormat dateFormat = new SimpleDateFormat(dateFormate); Date date = new
		 * Date(); String currentDate = dateFormat.format(date); return currentDate; }
		 */

	/**
	 * @Purpose To get current date in required format and time zone
	 * @Constraints
	 * @Input String : required format
	 * @Output boolean : Returns date in user required format
	 */
	public String getCurrentDate(String dateFormate, String timezone) throws Exception {
		DateFormat dateFormat = new SimpleDateFormat(dateFormate);
		if (timezone != null) {
			dateFormat.setTimeZone(TimeZone.getTimeZone(timezone));
		}
		Date date = new Date();
		String currentDate = dateFormat.format(date);
		return currentDate;
	}

	/**
	 * @Purpose To get checkbox status
	 * @Constraints
	 * @Input String : Locator and Locator name
	 * @Output boolean : Returns true if selected or else false
	 */

	public boolean getCheckboxStatus(String locator, String locatorName) {
		boolean blnRes = false;
		WebElement ele = getElement(locator);
		if (ele.isSelected()) {
			blnRes = true;
			LogManager.logInfo(A2BWebActionEngine.class.getName(),
					"Successfully captured checkbox status of " + locatorName);
		}
		return blnRes;
	}

	/**
	 * @Purpose To get Element presence
	 * @Constraints
	 * @Input String : LocatorName and boolean presence
	 * @Output boolean : Returns true | false
	 */
	public boolean isElementPresent(String locatorName, boolean expected) {
		boolean status = false;
		try {
			WebElement ele = getElement(locatorName);
			status = (ele.isDisplayed()) ? true : false;
		} catch (Exception e) {
			status = false;
		}
		if (!(expected ^ status)) {
			status = true;
			LogManager.logInfo(A2BWebActionEngine.class.getName(),
					"ElementFoundSuccess" + locatorName + " diplayed as " + expected);
		} else {
			status = false;
			LogManager.logError(A2BWebActionEngine.class.getName(),
					"ElementFoundFailure" + locatorName + "Not Displayed " + expected);
		}
		return status;
	}

	/**
	 * @Purpose To do mouse hover in sub menu
	 * @Constraints
	 * @Input String : Parent Menu locator , Sub Menu locator and Locator Name
	 * @Output boolean : Returns true | false
	 */
	synchronized public boolean mouseHoverSubMenu(String parlocator, String sublocator, String locatorName) {
		boolean flag = false;
		try {
			// Actions actions = new Actions(this.driver);
			// this.driver.navigate().refresh();
			WebElement mo = getElement(parlocator);
			new Actions(this.driver).moveToElement(mo).perform();
			sleep(gblConstants.defSleepTime * 2);
			if (waitForElementPresent(sublocator)) {
				WebElement so = getElement(sublocator);
				new Actions(this.driver).moveToElement(so).perform();
				// .moveToElement(so).build().perform();
				LogManager.logInfo(A2BWebActionEngine.class.getName(),
						"MouseOver action is performed on " + locatorName);
				flag = true;
			} else {
				LogManager.logError(A2BWebActionEngine.class.getName(),
						"Unable to find     " + sublocator + " Sublocator");
				;
			}
		} catch (Exception e) {
			flag = false;
			e.printStackTrace();
			LogManager.logException(e, A2BWebActionEngine.class.getName(),
					"MouseOver action is not perform on " + locatorName);
		}
		return flag;
	}

	/*   *//**
			 * @Purpose To Load JcobDll based on system bit size Note: This will be removed
			 *          after update with winium
			 *//*
				 * public void loadJcobDll() { String jacobDllVersionToUse;
				 * 
				 * if (System.getProperty("sun.arch.data.model").contains("32"))
				 * jacobDllVersionToUse = "jacob-1.19-x86.dll"; else jacobDllVersionToUse =
				 * "jacob-1.19-x64.dll";
				 * 
				 * File file = new File("library"+File.separator+"jcobdll",
				 * jacobDllVersionToUse); System.setProperty(LibraryLoader.JACOB_DLL_PATH,
				 * file.getAbsolutePath()); }
				 */

	/**
	 * @Purpose To add Year to current date
	 * @Constraints
	 * @Input String : Parent Menu locator , Sub Menu locator and Locator Name
	 * @Output boolean : Returns true | false
	 */

	public String addtoCurrentDate(int num, String adddateTo, String dateFormate, String timezone) throws Exception {
		Calendar c = Calendar.getInstance();
		switch (adddateTo) {
		case "Year":
			c.add(Calendar.YEAR, num);
			break;
		case "Month":
			c.add(Calendar.MONTH, num);
			break;
		case "Day":
			c.add(Calendar.DAY_OF_MONTH, num);
			break;
		}
		DateFormat dateFormat = new SimpleDateFormat(dateFormate);
		if (timezone != null) {
			dateFormat.setTimeZone(TimeZone.getTimeZone(timezone));
		}
		String StartDate = dateFormat.format(c.getTime());
		return StartDate;
	}

	/**
	 * @Purpose To get Web Element By ID using Java Script
	 * @Constraints
	 * @Input String : ID value of Web Element
	 * @Output WebElement : Returns respective WebElemnt
	 */

	public WebElement getWebElementusingJSbyID(String id) {
		WebElement element = null;

		return (WebElement) ((JavascriptExecutor) driver).executeScript("return document.getElementById('" + id + "');",
				element);
	}

	/**
	 * Purpose: To generate random string based on the given criteria Input: String
	 * Integer,AlphaNumeric Output: String ; random string based on the input format
	 * Author-Date: 14-Aug-2018 Reviewed-Date:
	 */
	public String getRandom(String format, int number) {
		char[] charsString = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".toCharArray();
		char[] charsAlphaNum = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890".toCharArray();
		char[] charsNum = "1234567890".toCharArray();
		char[] chars = null;
		if (format.equalsIgnoreCase("ALPHANUMERIC"))
			chars = charsAlphaNum;
		else if (format.equalsIgnoreCase("INT"))
			chars = charsNum;
		else
			chars = charsString;
		StringBuilder sb = new StringBuilder();
		Random random = new Random();
		for (int i = 0; i < number; i++) {
			char c = chars[random.nextInt(chars.length)];
			sb.append(c);
		}
		String output = sb.toString();
		// LogManager.logInfo(ICMTestEngine.class.getName(), "Random number is : "
		// +output);
		return output;
	}

	/*
	 * public boolean waitForElementPresent(String locator, int secs) { boolean
	 * status = false; try { WebDriverWait wait = new WebDriverWait(driver, secs);
	 * WebElement reqEle =
	 * wait.until(ExpectedConditions.visibilityOfElementLocated(byLocator(locator)))
	 * ; status = (reqEle != null) ? true : false;
	 * //this.reporter.SuccessReport("Checked element present",
	 * "Successfully checked element present " + locator, Driver);
	 * //this.extentMngr.logResult(extentTC, Status.PASS,
	 * "Successfully checked element present " + locator);
	 * LogManager.logInfo(ICMTestEngine.class.getName(),
	 * "Successfully checked element present " + locator); } catch (TimeoutException
	 * te) { LogManager.logInfo(ICMTestEngine.class.getName(),
	 * "Timeout to check element present " + locator); status = false; }
	 */
	/*
	 * catch (StaleElementReferenceException se) {
	 * System.out.println("Stale Element Reference Exception for Element" +locator);
	 * status = false; }
	 * 
	 * catch (Exception e) { e.printStackTrace();
	 * 
	 * } return status; }
	 */

	/**
	 * Purpose: To wait for Page ready state Input: Driver instance Output: NA
	 */
	public void waitForPageLoad(WebDriver driver) {
		ExpectedCondition<Boolean> pageLoadCondition = new ExpectedCondition<Boolean>() {
			public Boolean apply(WebDriver driver) {
				return ((JavascriptExecutor) driver).executeScript("return document.readyState").equals("complete");
			}
		};
		WebDriverWait wait = new WebDriverWait(driver, gblConstants.implicitWaitTimeout);
		wait.until(pageLoadCondition);
	}

}
