package a2b.mobile.android.pages;

import java.awt.Dimension;
import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.util.HashMap;
import java.util.List;

import org.openqa.selenium.By;

import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.interactions.touch.TouchActions;
import org.openqa.selenium.remote.RemoteWebElement;
import org.openqa.selenium.support.PageFactory;

import a2b.core.logs.LogManager;
import a2b.mobile.android.engine.A2BMobileActionEngine;
import a2b.mobile.android.engine.A2BMobileTestEngine;
import amazon.config.gblConstants;
import amazon.core.accelerators.AppiumActionEngine;
import amazon.core.accelerators.AppiumActionEngine.DIRECTION;
import io.appium.java_client.MobileBy;
import io.appium.java_client.MobileElement;
import io.appium.java_client.TouchAction;
import io.appium.java_client.pagefactory.AndroidFindBy;
import io.appium.java_client.pagefactory.AppiumFieldDecorator;
import io.appium.java_client.touch.TapOptions;
import io.appium.java_client.touch.offset.PointOption;

public class AssignPage extends A2BMobileTestEngine{
	private A2BMobileActionEngine appEngine = null;
	
	
	
	public final String eleEditAsset = "xpath=//android.widget.EditText[contains(@resource-id,'"+ gblConstants.replaceText+"')]";
	
	
	public final String eleErrors = "xpath=//*[@text='"+ gblConstants.replaceText+"']";
	
	public final String eleLocationTree = "xpath=//*[@text='"+ gblConstants.replaceText+"']/../android.widget.ImageView";
	
	
	
	 @AndroidFindBy(id = "com.a2b.rfid.rfidandroid:id/scanEditTex")
		private WebElement EleSearch;
	 
	 @AndroidFindBy(id = "com.a2b.rfid.rfidandroid:id/itemTextView")
		private WebElement eleSearchIDResults;
	 
	 @AndroidFindBy(id = "com.a2b.rfid.rfidandroid:id/closeView")
		private WebElement eleSearchIDResultsCloseIcon;
	 
	 @AndroidFindBy(id = "com.a2b.rfid.rfidandroid:id/editTextAssignee")
		private WebElement EleCustodian;
	 
	 @AndroidFindBy(id = "com.a2b.rfid.rfidandroid:id/editTextLocation")
		private WebElement EleLocation;
	

		
	 
	 @AndroidFindBy(id = "com.a2b.rfid.rfidandroid:id/action_scanner_mode")
		private WebElement ScanerIcon;
		
	 
	 @AndroidFindBy(xpath = "//*[@text='RFID Mode']")
		private WebElement RFIDMode;
		
	 
	 @AndroidFindBy(xpath = "//*[@text='Barcode Mode']")
		private WebElement BarCodeMode;
		
	 @AndroidFindBy(id = "com.a2b.rfid.rfidandroid:id/assignButton")
		private WebElement AssigneeButton;
	 
	 
	 
	
	//*************************************************************************************

	
	
		public AssignPage(A2BMobileActionEngine actEng) {
			appEngine = actEng;
			PageFactory.initElements(new AppiumFieldDecorator(appEngine.getDriver()),this);
			 //actEng.loadPage();
		}
		
	
		public boolean waitForPage() {
			boolean res = false;
			try {
				res = this.appEngine.waitForElementVisibles(EleCustodian, gblConstants.pageLoadTimeout * 2);
			} catch (Exception e) {
				LogManager.logError(LoginPage.class.getName(), "Failed to load the Assignee Screen..");
			}
			return res;
		}
		

	
		public boolean fullViewAssigncreen() {
			boolean res= false;
			try {
			  	 Thread.sleep(5000);
			  	 this.appEngine.hideKeyboard();
				 res = this.appEngine.ScroolElementVisible("com.a2b.rfid.rfidandroid:id/navHost","A");
		  
			}catch (Exception e) {
				 LogManager.logInfo(HomePage.class.getName(), "Failed fullViewHomeScreen method");	
			}
			return res;
		}

		public boolean selectModeOfScan(String Mode) {
			boolean res= false;
			try {
			  	 res = this.appEngine.click(ScanerIcon);
			  	 reportStatus(res,"Successfully Clicked on Scan ICon ","Unable to Click on Scan Icon ");
			  	 if (Mode.equalsIgnoreCase("RfidMode")) {
			  		res = this.appEngine.click(RFIDMode);
			  		reportStatus(res,"Successfully selected RFID-Mode ","Unable to Select RFID Mode");
			  		
			  	 }else if(Mode.equalsIgnoreCase("BarCodeMode")) {
			  		res = this.appEngine.click(BarCodeMode);
			  		reportStatus(res,"Successfully selected Bar Code-Mode ","Unable to Select BarCode Mode");
			  	 }else {
			  		LogManager.logInfo(HomePage.class.getName(), "Please Select Mode Of Scan Option "); 
			  	 }	  	 
		  
			}catch (Exception e) {
				 LogManager.logInfo(HomePage.class.getName(), "Failed fullViewHomeScreen method");	
			}
			return res;
		}
		
		
		
		
		
		public boolean EnterTextOnEditAssigneeScreen(String FiledIDText,String value, boolean autoPopUpFiled) {
			boolean res= false;
			try {
				String ele= eleEditAsset .replace(gblConstants.replaceText, FiledIDText);
				res= this.appEngine.enterTxt(this.appEngine.getElement(ele), value);
				if (autoPopUpFiled) {
					Robot rb = new Robot();
					rb.keyPress(KeyEvent.VK_DOWN);
					rb.keyRelease(KeyEvent.VK_DOWN);
					rb.keyPress(KeyEvent.VK_ENTER);
					rb.keyRelease(KeyEvent.VK_ENTER);
				}
				reportStatus(res,"Successfully Enter value on Assignee Screen- filed- "+FiledIDText+" : "+value ,"Failed to enter value on Assign Aset  Screen"); 
			}catch (Exception e) {
				 LogManager.logInfo(HomePage.class.getName(), "Failed EnterText on Assignee screen");	
			}
			return res;
		}
		
		public boolean VerifyErrorsOnAssigneeScreen(String error) throws Throwable {
			boolean res= false;
			try {
				String ele= eleErrors .replace(gblConstants.replaceText, error);
				res = this.appEngine.isElementPresent(this.appEngine.getElement(ele), error, true);
				reportStatus(res,"Successfully Displayed Error- "+error ,"Fail to display error- "+error); 
			}catch (Exception e) {
				 LogManager.logInfo(HomePage.class.getName(), "Failed to VerifyErrorsOnAssigneeScreen");	
			}
			return res;
		}
		
		public boolean clickElement(String eleText) throws Throwable {
			boolean res= false;
			try {
				String ele= eleErrors .replace(gblConstants.replaceText, eleText);
                res = this.appEngine.click(this.appEngine.getElement(ele));
				reportStatus(res,"Successfully clicked element- "+eleText ,"Fail to click element- "+eleText); 
			}catch (Exception e) {
				 LogManager.logInfo(HomePage.class.getName(), "Failed to clickElement");	
			}
			return res;
		}
		
		public boolean LocationTreeExpand(String locationName) throws Throwable {
			boolean res= false;
			try {
				String ele= eleLocationTree .replace(gblConstants.replaceText, locationName);
				res = this.appEngine.click(this.appEngine.getElement(ele));
				reportStatus(res,"Successfully Expanded Location "+locationName ,"Fail to Expand Location- "+locationName); 
			}catch (Exception e) {
				 LogManager.logInfo(HomePage.class.getName(), "Failed to LocationTreeExpand");	
			}
			return res;
		}
		
		public boolean LocationTreeExpand(String[] locationName) throws Throwable {
			boolean res= false;
			try {
				
				for(int i=0 ; i < locationName.length-1;i++ ) {
					Thread.sleep(4000);
					LocationTreeExpand(locationName[i]);
				}
				res = true;
			}catch (Exception e) {
				 LogManager.logInfo(HomePage.class.getName(), "Failed to LocationTreeExpand");	
			}
			return res;
		}
		
		
		public void verifySearchedResults(String Result , Boolean CloseIcon ) throws Throwable {
			boolean res= false;
			try {
				
				res = this.appEngine.waitForElementVisibles(eleSearchIDResults, gblConstants.pageLoadTimeout * 2);
				String Results = this.appEngine.getVisibleText(eleSearchIDResults);
				res = Results.contains(Result) ; 
				reportStatus(res,"Loaded and Tagged Results- "+Result ,"Failed to Load Seared Results- "+Result); 
				
				if (CloseIcon) {
					res= this.appEngine.click(eleSearchIDResultsCloseIcon);
					reportStatus(res,"Successfully cleared Searched Results" ,"Failed to clear search results ");
				}
				
			}catch (Exception e) {
				 LogManager.logInfo(HomePage.class.getName(), "Failed to verifySearchedResults");	
			}
			
		}
		
		
		public void clickOnAssign() {
			boolean res= false;
			try {
				res= this.appEngine.click(AssigneeButton);
				reportStatus(res,"Successfully Clicked On Assignee Button","Unable to click Assignee button"); 
			}catch (Exception e) {
				 LogManager.logInfo(HomePage.class.getName(), "Failed to click On Assign");	
			}
			
		}
		
		
		public boolean ClickOnSearchIconAssignee(String FiledIDText) {
			boolean res= false;
			try {	
				this.appEngine.hideKeyboard();
				String elexpath= eleEditAsset .replace(gblConstants.replaceText, FiledIDText);
				
				List<MobileElement> element = this.appEngine.driver.findElementsByXPath(elexpath.split("=")[1]);
				int leftX = element.get(0).getLocation().getX();
				int rightX = (int) (leftX + element.get(0).getSize().getWidth()*0.99);
				int middleX = (rightX + leftX) / 2;
				int upperY = element.get(0).getLocation().getY();
				int lowerY = upperY + element.get(0).getSize().getHeight();
				int middleY = (upperY + lowerY) / 2;
				
				TouchAction a2 = new TouchAction(this.appEngine.driver);
				a2.tap(PointOption.point(rightX,middleY)).perform();
			    res = true ;
			}catch (Exception e) {
				 LogManager.logInfo(HomePage.class.getName(), "Failed fullViewHomeScreen method");	
			}
			return res;
		}


		
		
		
		
	
	}
