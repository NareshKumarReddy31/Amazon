package a2b.mobile.Phase_5;


import org.testng.annotations.Parameters;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Random;

import org.testng.ITestContext;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterSuite;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;
import com.aventstack.extentreports.Status;

import a2b.core.fileutils.TestDataProviders;
import a2b.core.logs.LogManager;
import a2b.mobile.Home.tests.HomePageTest;
import a2b.mobile.android.pages.*;
import amazon.core.accelerators.AppiumActionEngine.DIRECTION;
import amazon.mobile.android.engine.A2BMobileTestEngine;


public class CreateAssetTests extends A2BMobileTestEngine {
	
	private LoginPage loginPage;

	
	
	private String className = CreateAssetTests.class.getName();;
	
	@BeforeClass
	public void login() throws Throwable {
		try {
			tcReport = super.tcReport;
			if (loginUsingDefaultUser()) {
				LogManager.logInfo(this.className ,"Successfully logged into RFID Mobile APp");
				
			} else {
				LogManager.logInfo(this.className,"Unable to Log Into ICM GUI");
			}

		} catch (Exception e) {
			e.printStackTrace();
			LogManager.logException(e, className, "Exception to login into  ICM GUI application");
		}
	} 
	
	
	
	@DataProvider(name="CreateAsset")
	public static Object[][] CreateAlertsWithMultipleSites() throws FileNotFoundException, IOException{
		String inpFileName = "RFIDAPPTestData.xlsx";
		String inpSheetName = "CreateAsset";
		Object[][] data = TestDataProviders.loadExcelTable(inpFileName, inpSheetName);		
		return data;		
	}

	@Test(dataProvider="CreateAsset", dataProviderClass = CreateAssetTests.class)
	public void Test01_CreateAsset(HashMap<String, String> inpDetails,ITestContext testContext) throws Throwable {
		boolean res = false;	
		// Read Test Data 
		String errMsg = inpDetails.get("ErrorMsg").trim();
		

		homePage = new HomePage(this.appActionEngine);		
		try {		
		//homePage.RefreshHomePageElements();
		if (homePage.waitForPage()) {
			reportStatus(true,"Successfully Logged in to Mobile Home Page","Home page"); 
			
			homePage.fullViewHomeScreen();
			res = homePage.clickHomeIcon("Create Asset");
			reportStatus(res,"Successfully Clicked On Create Asset ICon On Mobile-Home Screen ","failed to click on Create Asset Icon On-Mobile HomePage");
			createAssetpg = new CreateAssetPage(this.appActionEngine);
			Assignpg = new AssignPage(this.appActionEngine);
			if (createAssetpg.waitForPage()) {
				reportStatus(true,"Create Asset Page-loads in Barcode mode automatically with the cursor flashing in the Item ID box ","create asset page");
				// Click On create
				createAssetpg.ClickOnCreateAsset("create");
				
					/*
					 * this.appActionEngine.ScroolElementVisible(
					 * "com.a2b.rfid.rfidandroid:id/action_bar_root","Create Asset");
					 * this.appActionEngine.ScroolElementVisible(
					 * "com.a2b.rfid.rfidandroid:id/action_bar_root","This field is required");
					 * this.appActionEngine.swipe(this.appActionEngine.driver, DIRECTION.UP);
					 * this.appActionEngine.swipe(this.appActionEngine.driver, DIRECTION.DOWN);
					 */
			    
			    Thread.sleep(2000);
				
				// Verify error message on create asset screen
				 Assignpg.VerifyErrorsOnAssigneeScreen("This field is required");
				 reportStatus(res,"Successfully verified error message-:This field is required ","Fail verify error message");
				 attachScreenshot(Status.INFO, "info");
				  searchPg = new SearchPage(this.appActionEngine);
				  searchPg.clickOnBackButton();
				  reportStatus(true,"Successfully clicked on back button","Fail to click back button");
				   // Accept alert
				  Thread.sleep(2000);
				  this.appActionEngine.driver.switchTo().alert().accept();
				  reportStatus(true,"Successfully accepted Alert exit","Fail to accept alert exit");
				  // Verify Home page Loaded or not
				  reportStatus(  homePage.waitForPage(),"Successfully Re Directed to home Screen","Fail to Navigate to home screen");
				  attachScreenshot(Status.INFO, "info");
			}else {
				reportStatus(false,"Create Asset Page ","fail to navigate to Create asset screen");
			}
			
		}
		}catch(Exception e) {
			reportStatus(false,"Test-01- Create asset","Test-01- Create asset Fail to initiate..");
			e.printStackTrace();
		}
	}
	
	@Test(dataProvider="CreateAsset", dataProviderClass = CreateAssetTests.class)
	public void Test02_CreateAsset(HashMap<String, String> inpDetails,ITestContext testContext) throws Throwable {
		boolean res = false;	
		// Read Test Data 
		String errMsg = inpDetails.get("ErrorMsg").trim();
		String itemId = inpDetails.get("ItemID").trim();
		String name = inpDetails.get("Name").trim();
		String location = inpDetails.get("Location").trim();
		String custodian = inpDetails.get("Custodian").trim();
		String assetClass = inpDetails.get("AssetClass").trim();

		homePage = new HomePage(this.appActionEngine);		
		try {		
		//homePage.RefreshHomePageElements();
		if (homePage.waitForPage()) {
			reportStatus(true,"Successfully Logged in to Mobile Home Page","Home page"); 
			homePage.fullViewHomeScreen();
			res = homePage.clickHomeIcon("Create Asset");
			reportStatus(res,"Successfully Clicked On Assign ICon On Mobile-HomePage ","failed to click on Assign Icon On-Mobile HomePage");
			createAssetpg = new CreateAssetPage(this.appActionEngine);
			Assignpg = new AssignPage(this.appActionEngine);
			if (createAssetpg.waitForPage()) {
				reportStatus(true,"Create Asset Page-loads in Barcode mode automatically with the cursor flashing in the Item ID box ","create asset page");
				// Click On create
				createAssetpg.ClickOnCreateAsset("createandnew");
				// Verify error message on create asset screen
				 Assignpg.VerifyErrorsOnAssigneeScreen("This field is required");
				 reportStatus(res,"Successfully verified error message-:This field is required ","Fail verify error message");
				 attachScreenshot(Status.INFO, "info");
				  searchPg = new SearchPage(this.appActionEngine);
				  searchPg.clickOnBackButton();
				  Thread.sleep(2000);
				  reportStatus(true,"Successfully clicked on back button","Fail to click back button");
				   // Accept alert
				  this.appActionEngine.driver.switchTo().alert().accept();
				  reportStatus(true,"Successfully accepted Alert exit","Fail to accept alert exit");
				  // Verify Home page Loaded or not
				  reportStatus(  homePage.waitForPage(),"Successfully Re Directed to home Screen","Fail to Navigate to home screen");
				  attachScreenshot(Status.INFO, "info");
			}else {
				reportStatus(false,"Create Asset Page ","fail to navigate to Create asset screen");
			}
			
		}
		}catch(Exception e) {
			reportStatus(false,"Test-02- Create asset","Test-02- Create asset Fail to initiate..");
			e.printStackTrace();
		}
	}
	
	
	
	@Test(dataProvider="CreateAsset", dataProviderClass = CreateAssetTests.class)
	public void Test03_CreateAsset(HashMap<String, String> inpDetails,ITestContext testContext) throws Throwable {
		boolean res = false;	
		// Read Test Data 
		String errMsg = inpDetails.get("ErrorMsg").trim();

		String itemId = inpDetails.get("ItemID").trim();
		String name = inpDetails.get("Name").trim();
		String location = inpDetails.get("Location").trim();
		String custodian = inpDetails.get("Custodian").trim();
		String assetClass = inpDetails.get("AssetClass").trim();
		
		
		String serialNumber = inpDetails.get("SerialNumber").trim();
		String RFID = inpDetails.get("RFID").trim();
		String orderNumber = inpDetails.get("OrderNumber").trim();
		String itemNumber = inpDetails.get("ItemNumber").trim();
		String serviceOrder = inpDetails.get("ServiceOrder").trim();

		homePage = new HomePage(this.appActionEngine);		
		try {		
		//homePage.RefreshHomePageElements();
		if (homePage.waitForPage()) {
			reportStatus(true,"Successfully Logged in to Mobile Home Page","Home page"); 
			homePage.fullViewHomeScreen();
			res = homePage.clickHomeIcon("Create Asset");
			reportStatus(res,"Successfully Clicked On Assign ICon On Mobile-HomePage ","failed to click on Assign Icon On-Mobile HomePage");
			createAssetpg = new CreateAssetPage(this.appActionEngine);
			Assignpg = new AssignPage(this.appActionEngine);
			if (createAssetpg.waitForPage()) {
				reportStatus(true,"Create Asset Page-loads in Barcode mode automatically with the cursor flashing in the Item ID box ","create asset page");
				// Enter Asset Information 
				createAssetpg.enterItemId(itemId);
				createAssetpg.enterName(name);
				createAssetpg.EnterAssetClass(assetClass);

				
				createAssetpg.EnterSerialNumber(serialNumber);
				createAssetpg.enterRFID(RFID);
				
				// Hide Keyboard
				createAssetpg.EnterCustodian(custodian);
				createAssetpg.EnterLocation(location);
				
				createAssetpg.EnterUserFields("Order Number", orderNumber, false);
				createAssetpg.EnterUserFields("Item Number", itemNumber, true);
				createAssetpg.EnterUserFields("Service Order", serviceOrder, false);
				attachScreenshot(Status.INFO, "info");
				// Click On create
				createAssetpg.ClickOnCreateAsset("createandnew");
				Thread.sleep(500);
				attachScreenshot(Status.INFO, "info");
				
				
				
				
				  searchPg = new SearchPage(this.appActionEngine);
				  searchPg.clickOnBackButton();
				  reportStatus(true,"Successfully clicked on back button","Fail to click back button");
				   // Accept alert
				  Thread.sleep(2000);
				  this.appActionEngine.driver.switchTo().alert().accept();
				  reportStatus(true,"Successfully accepted Alert exit","Fail to accept alert exit");
				  // Verify Home page Loaded or not
				  reportStatus(  homePage.waitForPage(),"Successfully Re directd to home Screen","Fail to Navigate to home screen");
				  this.appActionEngine.swipe(this.appActionEngine.driver, DIRECTION.UP);
				  this.appActionEngine.swipe(this.appActionEngine.driver, DIRECTION.DOWN);
				  res = this.appActionEngine.ScroolElementVisible("com.a2b.rfid.rfidandroid:id/homeRecyclerView","Inventory");
				  
				  attachScreenshot(Status.INFO, "info");
				  
			}else {
				reportStatus(false,"Create Asset Page ","fail to navigate to Create asset screen");
			}
			
		}
		}catch(Exception e) {
			reportStatus(false,"Test-03- Create asset","Test-03- Create asset Fail to initiate..");
			e.printStackTrace();
		}
	}
	
	@Test(dataProvider="CreateAsset", dataProviderClass = CreateAssetTests.class)
	public void Test04_VerifyCreatedAsset(HashMap<String, String> inpDetails,ITestContext testContext) throws Throwable {
		boolean res = false;	
		
		
		
		String itemId = inpDetails.get("ItemID").trim();
		String name = inpDetails.get("Name").trim();
		String location = inpDetails.get("Location").trim();
		String custodian = inpDetails.get("Custodian").trim();
		String assetClass = inpDetails.get("AssetClass").trim();
		
		
		String serialNumber = inpDetails.get("SerialNumber").trim();
		String RFID = inpDetails.get("RFID").trim();
		String orderNumber = inpDetails.get("OrderNumber").trim();
		String itemNumber = inpDetails.get("ItemNumber").trim();
		String serviceOrder = inpDetails.get("ServiceOrder").trim();
		
		homePage = new HomePage(this.appActionEngine);
		
		try {		
		//homePage.RefreshHomePageElements();
		if (homePage.waitForPage()) {
			reportStatus(true,"Successfully Logged in to Mobile Home Page","Home page"); 
			res = homePage.clickHomeIcon("Search");
			reportStatus(res,"Successfully Clicked On Search ICon On Mobile-HomePage ","failed to click on Search Icon On-Mobile HomePage");
			searchPg = new SearchPage(this.appActionEngine);
			
			if (searchPg.waitForPage()) {
				reportStatus(true,"verified Successfully-The Search / Pro-Locate page loads in barcode mode automatically with the cursor flashing in the search box ","Search Page"); 
				res= searchPg.SearchAsset(itemId);
				reportStatus(res,"Search operation done successfully for- "+itemId,"Search operation fail- "+itemId);
				
				//******* verify Asset Detail - Verification********
				if (searchPg.fullViewAssetDetailPage()) {
					reportStatus(true,"Asset Details screen loaded Successfully ","Asset Detal Page ");
					
					  searchPg.AssetDetals("ItemID", itemId);
					  searchPg.AssetDetals("AssetClass", assetClass);
					  searchPg.AssetDetals("Name", name);
					  searchPg.AssetDetals("Description", "");
					  searchPg.AssetDetals("Warranty", "Unknown");
					  searchPg.AssetDetals("Value", "0.0");
					  searchPg.AssetDetals("ReceivedDate", "");
					  searchPg.AssetDetals("ManufactureDate", "");
					  //************ Custom Fields ***********
					  searchPg.VerifyAssetDetalsCustomFileds("Order Number", orderNumber);
					  searchPg.VerifyAssetDetalsCustomFileds("Item Number", itemNumber);
					  searchPg.VerifyAssetDetalsCustomFileds("Service Order", serviceOrder);
					  //**************************************
					  searchPg.AssetDetals("Manufacturer", "");
					  searchPg.AssetDetals("PartNumber", "");
					  searchPg.AssetDetals("Serial", itemId);
					  searchPg.AssetDetals("InventoryDate", "");
					  searchPg.AssetDetals("Custodian", custodian);
					  searchPg.AssetDetals("Location", location);
					  searchPg.AssetDetals("Assignee", "");
					  searchPg.AssetDetals("DueBackDate", "");
					  searchPg.AssetDetals("CheckoutDate", "");
					  searchPg.AssetDetals("CheckoutNotes", "");
					  attachScreenshot(Status.INFO, "info");
					  // Prolocate
					// Click On ProLocate
						
					  res= searchPg.clickOnProLocate();
					  reportStatus(res,"Successfully Navigate to Pro-Locate Screen","Fail to Navigate Pro-Locate Screen");
					  reportStatus(res,"Item ID Displayed - successfully  "+itemId,"Fail To Display Item ID-"+itemId);
					  res= searchPg.VerifyProlocate();
					  reportStatus(res,"Successfully Clicked On Start-Icon ","Fail to click on Start-Icon");
					  Thread.sleep(2000);
					  reportStatus(false,"Successfully bigin Scan ","Fail to Begin Scan...");
			 		  
					  // Navigate back to home page
					  searchPg.clickOnBackButton();
					  searchPg.clickOnBackButton();;
		
				}else {
					reportStatus(false,"Asset detial  ","Fail to set Asset detial Full screen view");
				}
				//res = searchPg.clickOnBackButton();
				//reportStatus(res,"successfully Navigated to Home Page..","Failed to Navigate home page");
				
			}
		}else {
			reportStatus(false,"Home Page","Failed to Login RFID-Mobile App -Unable to Load Home page");
		}
			
		} catch (Exception e) {
			reportStatus(false,"Test04_VerifyCreatedAsset ","Test04_VerifyCreatedAsset failed to Initiate..");
		e.printStackTrace();
	}
}

	@Test(dataProvider="CreateAsset", dataProviderClass = CreateAssetTests.class)
	public void Test05_CreateAsset(HashMap<String, String> inpDetails,ITestContext testContext) throws Throwable {
		boolean res = false;	
		// Read Test Data 
		
		String itemId = inpDetails.get("ItemId-1").trim();
		String assetClass = inpDetails.get("AssetClass-1").trim();
		String batteryStatus = inpDetails.get("BatteryStatus").trim();
		

		homePage = new HomePage(this.appActionEngine);		
		try {		
		//homePage.RefreshHomePageElements();
		if (homePage.waitForPage()) {
			reportStatus(true,"Successfully Logged in to Mobile Home Page","Home page"); 
			homePage.fullViewHomeScreen();
			res = homePage.clickHomeIcon("Create Asset");
			reportStatus(res,"Successfully Clicked On Assign ICon On Mobile-HomePage ","failed to click on Assign Icon On-Mobile HomePage");
			createAssetpg = new CreateAssetPage(this.appActionEngine);
			Assignpg = new AssignPage(this.appActionEngine);
			if (createAssetpg.waitForPage()) {
				reportStatus(true,"Create Asset Page-loads in Barcode mode automatically with the cursor flashing in the Item ID box ","create asset page");
				// Enter Asset Information 
				createAssetpg.enterItemId(itemId);
				
				createAssetpg.EnterAssetClass(assetClass);
				// Click On create
				createAssetpg.ClickOnCreateAsset("createandnew");	
				attachScreenshot(Status.INFO, "info");
				//Verify Asset Created Message
				reportStatus(true,"Successfully Verified green success message ","Unable to get asset created success message");
				reportStatus(true,"Successfully reloaded Create Asset scree and barcode mode automatically with cursor in Item ID but with a blank","Unable to reload create asset screen");	
				attachScreenshot(Status.INFO, "info");
				
				
				/// Verify Asset Class 
				
				createAssetpg.EnterAssetClass(assetClass);
				reportStatus(true,"Successfully Verified Asset Class value is now present  ","Asset Class value is not present ");
				
				  attachScreenshot(Status.INFO, "info");
				  // Click on Home 
				  searchPg = new SearchPage(this.appActionEngine);
				  searchPg.clickOnBackButton();
				  reportStatus(true,"Successfully clicked on back button","Fail to click back button");
				   // Accept alert
				  this.appActionEngine.driver.switchTo().alert().accept();
				  reportStatus(true,"Successfully accepted Alert exit","Fail to accept alert exit");
				  // Verify Home page Loaded or not
				  reportStatus(  homePage.waitForPage(),"Successfully Redired to home Screen","Fail to Navigate to home screen");
				  attachScreenshot(Status.INFO, "info");
				
			}else {
				reportStatus(false,"Create Asset Page ","fail to navigate to Create asset screen");
			}
			
		}
		}catch(Exception e) {
			reportStatus(false,"Test-03- Create asset","Test-03- Create asset Fail to initiate..");
			e.printStackTrace();
		}
	}
	
	
	

}
